require 'conversion/steps/docx_to_html_pandoc'

describe Conversion::Steps::DocxToHtmlPandoc do

  let!(:subject)             { Conversion::Steps::DocxToHtmlPandoc.new }
  let!(:docx_file_1)         { Rack::Test::UploadedFile.new('spec/fixtures/files/demo.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') }
  let!(:docx_file_2)         { Rack::Test::UploadedFile.new('spec/fixtures/files/test-1.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') }
  let!(:docx_file_3)         { Rack::Test::UploadedFile.new('spec/fixtures/files/basic_doc.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') }
  let!(:docx_file_4)         { Rack::Test::UploadedFile.new('spec/fixtures/files/SampleStyles.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') }

  describe 'file conversion step tests' do

    context 'converting a file successfully using DocxToHTML (Pandoc)' do

      after :each do
        sleep 2
      end
      specify do
        test_file_conversion(docx_file_1, expected_result_1)
      end

      specify do
        test_file_conversion(docx_file_2, expected_result_2)
      end

      specify do
        test_file_conversion(docx_file_3, expected_result_3)
      end

      specify do
        test_file_conversion(docx_file_4, expected_result_4)
      end

    end

  end
end

def test_file_conversion(input_fixture_file, expected_result)
  result = subject.convert_file(input_fixture_file.path)

  expect(result).to_not be_nil
  expect(File.read(result)).to eq expected_result
end

def expected_result_1
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <title>Demonstration of DOCX support in calibre</title>\n  <style type=\"text/css\">code{white-space: pre;}</style>\n</head>\n<body>\n<div id=\"header\">\n<h1 class=\"title\"><span id=\"OLE_LINK1\" class=\"anchor\"><span id=\"OLE_LINK2\" class=\"anchor\"><span id=\"_Toc359077851\" class=\"anchor\"></span></span></span>Demonstration of DOCX support in calibre</h1>\n</div>\n<p>This document demonstrates the ability of the calibre DOCX Input plugin to convert the various typographic features in a Microsoft Word (2007 and newer) document. Convert this document to a modern ebook format, such as AZW3 for Kindles or EPUB for other ebook readers, to see it in action.</p>\n<p>There is support for images, tables, lists, footnotes, endnotes, links, dropcaps and various types of text and paragraph level formatting.</p>\n<p>To see the DOCX conversion in action, simply add this file to calibre using the <strong>“Add Books”</strong> button and then click “<strong>Convert”.</strong> Set the output format in the top right corner of the conversion dialog to EPUB or AZW3 and click <strong>“OK”</strong>.</p>\n<h1 id=\"text-formatting\">Text Formatting</h1>\n<h2 id=\"inline-formatting\">Inline formatting</h2>\n<p>Here, we demonstrate various types of inline text formatting and the use of embedded fonts.</p>\n<p>Here is some <strong>bold,</strong> <em>italic, <strong>bold-italic,</strong> underlined</em> and <del>struck out</del> text. Then, we have a super<sup>script</sup> and a sub<sub>script</sub>. Now we see some red, green and blue text. Some text with a yellow highlight. Some text in a box. Some text in inverse video.</p>\n<p>A paragraph with styled text: <em>subtle emphasis</em> followed by <strong>strong text</strong> and <em><strong>intense emphasis</strong></em>. This paragraph uses document wide styles for styling rather than inline text properties as demonstrated in the previous paragraph — calibre can handle both with equal ease.</p>\n<h2 id=\"fun-with-fonts\">Fun with fonts</h2>\n<p>This document has embedded the Ubuntu font family. The body text is in the Ubuntu typeface, here is some text in the Ubuntu Mono typeface, notice how every letter has the same width, even i and m. Every embedded font will automatically be embedded in the output ebook during conversion.</p>\n<h2 id=\"paragraph-level-formatting\"><span id=\"_Paragraph_level_formatting\" class=\"anchor\"><span id=\"_Toc359077855\" class=\"anchor\"></span></span><strong>Paragraph level formatting</strong></h2>\n<p>You can do crazy things with paragraphs, if the urge strikes you. For instance this paragraph is right aligned and has a right border. It has also been given a light gray background.</p>\n<p>For the lovers of poetry amongst you, paragraphs with hanging indents, like this often come in handy. You can use hanging indents to ensure that a line of poetry retains its individual identity as a line even when the screen is too narrow to display it as a single line. Not only does this paragraph have a hanging indent, it is also has an extra top margin, setting it apart from the preceding paragraph.</p>\n<h1 id=\"tables\">Tables</h1>\n<table>\n<thead>\n<tr class=\"header\">\n<th>ITEM</th>\n<th>NEEDED</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Books</td>\n<td>1</td>\n</tr>\n<tr class=\"even\">\n<td>Pens</td>\n<td>3</td>\n</tr>\n<tr class=\"odd\">\n<td>Pencils</td>\n<td>2</td>\n</tr>\n<tr class=\"even\">\n<td>Highlighter</td>\n<td>2 colors</td>\n</tr>\n<tr class=\"odd\">\n<td>Scissors</td>\n<td>1 pair</td>\n</tr>\n</tbody>\n</table>\n<p>Tables in Word can vary from the extremely simple to the extremely complex. calibre tries to do its best when converting tables. While you may run into trouble with the occasional table, the vast majority of common cases should be converted very well, as demonstrated in this section. Note that for optimum results, when creating tables in Word, you should set their widths using percentages, rather than absolute units. To the left of this paragraph is a floating two column table with a nice green border and header row.</p>\n<p>Now let’s look at a fancier table—one with alternating row colors and partial borders. This table is stretched out to take 100% of the available width.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>City or Town</th>\n<th>Point A</th>\n<th>Point B</th>\n<th>Point C</th>\n<th>Point D</th>\n<th>Point E</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Point A</td>\n<td>—</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>Point B</td>\n<td>87</td>\n<td>—</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>Point C</td>\n<td>64</td>\n<td>56</td>\n<td>—</td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>Point D</td>\n<td>37</td>\n<td>32</td>\n<td>91</td>\n<td>—</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>Point E</td>\n<td>93</td>\n<td>35</td>\n<td>54</td>\n<td>43</td>\n<td>—</td>\n</tr>\n</tbody>\n</table>\n<p>Next, we see a table with special formatting in various locations. Notice how the formatting for the header row and sub header rows is preserved.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>College</th>\n<th>New students</th>\n<th>Graduating students</th>\n<th>Change</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td></td>\n<td><em>Undergraduate</em></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>Cedar University</td>\n<td>110</td>\n<td>103</td>\n<td>+7</td>\n</tr>\n<tr class=\"odd\">\n<td>Oak Institute</td>\n<td>202</td>\n<td>210</td>\n<td>-8</td>\n</tr>\n<tr class=\"even\">\n<td></td>\n<td><em>Graduate</em></td>\n<td></td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td>Cedar University</td>\n<td>24</td>\n<td>20</td>\n<td>+4</td>\n</tr>\n<tr class=\"even\">\n<td>Elm College</td>\n<td>43</td>\n<td>53</td>\n<td>-10</td>\n</tr>\n<tr class=\"odd\">\n<td>Total</td>\n<td>998</td>\n<td>908</td>\n<td>90</td>\n</tr>\n</tbody>\n</table>\n<p><em>Source:</em> Fictitious data, for illustration purposes only</p>\n<p>Next, we have something a little more complex, a nested table, i.e. a table inside another table. Additionally, the inner table has some of its cells merged. The table is displayed horizontally centered.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th><table>\n<thead>\n<tr class=\"header\">\n<th><p>One</p>\n<p>Three</p></th>\n<th>Two</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td></td>\n<td>Four</td>\n</tr>\n</tbody>\n</table></th>\n<th>To the left is a table inside a table, with some cells merged.</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<p>We end with a fancy calendar, note how much of the original formatting is preserved. Note that this table will only display correctly on relatively wide screens. In general, very wide tables or tables whose cells have fixed width requirements don’t fare well in ebooks.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>December 2007</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Sun</td>\n</tr>\n<tr class=\"even\">\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>9</td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>23</td>\n</tr>\n<tr class=\"odd\">\n<td></td>\n</tr>\n<tr class=\"even\">\n<td>30</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"structural-elements\">Structural Elements</h1>\n<p>Miscellaneous structural elements you can add to your document, like footnotes, endnotes, dropcaps and the like.</p>\n<h2 id=\"footnotes-endnotes\">Footnotes &amp; Endnotes</h2>\n<p>Footnotes<a href=\"#fn1\" class=\"footnoteRef\" id=\"fnref1\"><sup>1</sup></a> and endnotes<a href=\"#fn2\" class=\"footnoteRef\" id=\"fnref2\"><sup>2</sup></a> are automatically recognized and both are converted to endnotes, with backlinks for maximum ease of use in ebook devices.</p>\n<h2 id=\"dropcaps\">Dropcaps</h2>\n<p>Drop caps are used to emphasize the leading paragraph at the start of a section. In Word it is possible to specify how many lines of text a drop-cap should use. Because of limitations in ebook technology, this is not possible when converting. Instead, the converted drop cap will use font size and line height to simulate the effect as well as possible. While not as good as the original, the result is usually tolerable. This paragraph has a “D” dropcap set to occupy three lines of text with a font size of 58.5 pts. Depending on the screen width and capabilities of the device you view the book on, this dropcap can look anything from perfect to ugly.</p>\n<h2 id=\"links\">Links</h2>\n<p>Two kinds of links are possible, those that refer to an external website and those that refer to locations inside the document itself. Both are supported by calibre. For example, here is a link pointing to the <a href=\"http://calibre-ebook.com/download\">calibre download page</a>. Then we have a link that points back to the section on <a href=\"#_Paragraph_level_formatting\">paragraph level formatting</a> in this document.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<p>There are two approaches that calibre takes when generating a Table of Contents. The first is if the Word document has a Table of Contents itself. Provided that the Table of Contents uses hyperlinks, calibre will automatically use it. The levels of the Table of Contents are identified by their left indent, so if you want the ebook to have a multi-level Table of Contents, make sure you create a properly indented Table of Contents in Word.</p>\n<p>If no Table of Contents is found in the document, then a table of contents is automatically generated from the headings in the document. A heading is identified as something that has the Heading 1 or Heading 2, etc. style applied to it. These headings are turned into a Table of Contents with Heading 1 being the topmost level, Heading 2 the second level and so on.</p>\n<p>You can see the Table of Contents created by calibre by clicking the Table of Contents button in whatever viewer you are using to view the converted ebook.</p>\n<p><a href=\"#_Toc359077851\">Demonstration of DOCX support in calibre 1</a></p>\n<p><a href=\"#text-formatting\">Text Formatting 2</a></p>\n<p><a href=\"#inline-formatting\">Inline formatting 2</a></p>\n<p><a href=\"#fun-with-fonts\">Fun with fonts 2</a></p>\n<p><a href=\"#_Toc359077855\">Paragraph level formatting 2</a></p>\n<p><a href=\"#tables\">Tables 3</a></p>\n<p><a href=\"#structural-elements\">Structural Elements 5</a></p>\n<p><a href=\"#footnotes-endnotes\">Footnotes &amp; Endnotes 5</a></p>\n<p><a href=\"#dropcaps\">Dropcaps 5</a></p>\n<p><a href=\"#links\">Links 5</a></p>\n<p><a href=\"#table-of-contents\">Table of Contents 5</a></p>\n<p><a href=\"#images\">Images 7</a></p>\n<p><a href=\"#lists\">Lists 8</a></p>\n<p><a href=\"#bulleted-list\">Bulleted List 8</a></p>\n<p><a href=\"#numbered-list\">Numbered List 8</a></p>\n<p><a href=\"#multi-level-lists\">Multi-level Lists 8</a></p>\n<p><a href=\"#continued-lists\">Continued Lists 8</a></p>\n<h1 id=\"images\">Images</h1>\n<p>Images can be of three main types. Inline images are images that are part of the normal text flow, like this image of a green dot <img src=\"media/image2.png\" width=\"14\" height=\"14\" />. Inline images do not cause breaks in the text and are usually small in size.<img src=\"media/image3.png\" width=\"102\" height=\"102\" /> The next category of image is a floating image, one that “floats “ on the page and is surrounded by text. Word supports more types of floating images than are possible with current ebook technology, so the conversion maps floating images to simple left and right floats, as you can see with the left and right arrow images on the sides of this paragraph.</p>\n<p>The final type of image is a “block” image, one that becomes a paragraph on its own and has no text on either side. Below is a centered green dot.</p>\n<p><img src=\"media/image2.png\" width=\"26\" height=\"25\" /><img src=\"media/image4.png\" width=\"102\" height=\"102\" />Centered images like this are useful for large pictures that should be a focus of attention.</p>\n<p>Generally, it is not possible to translate the exact positioning of images from a Word document to an ebook. That is because in Word, image positioning is specified in absolute units from the page boundaries. There is no analogous technology in ebooks, so the conversion will usually end up placing the image either centered or floating close to the point in the text where it was <em>inserted</em>, not necessarily where it appears on the page in Word.</p>\n<h1 id=\"lists\">Lists</h1>\n<p>All types of lists are supported by the conversion, with the exception of lists that use fancy bullets, these get converted to regular bullets.</p>\n<h2 id=\"bulleted-list\">Bulleted List</h2>\n<ul>\n<li><p>One</p></li>\n<li><p>Two</p></li>\n</ul>\n<h2 id=\"numbered-list\">Numbered List</h2>\n<ol style=\"list-style-type: decimal\">\n<li><p>One, with a very long line to demonstrate that the hanging indent for the list is working correctly</p></li>\n<li><p>Two</p></li>\n</ol>\n<h2 id=\"multi-level-lists\">Multi-level Lists</h2>\n<ol style=\"list-style-type: decimal\">\n<li><p>One</p>\n<ol style=\"list-style-type: decimal\">\n<li><p>Two</p>\n<ol style=\"list-style-type: decimal\">\n<li><p>Three</p></li>\n<li><p>Four with a very long line to demonstrate that the hanging indent for the list is working correctly.</p></li>\n<li><p>Five</p></li>\n</ol></li>\n</ol></li>\n<li><p>Six</p>\n<p>A Multi-level list with bullets:</p></li>\n</ol>\n<ul>\n<li><p>One</p>\n<ul>\n<li><p>Two</p>\n<ul>\n<li><p>This bullet uses an image as the bullet item</p>\n<ul>\n<li><p>Four</p></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><p>Five</p></li>\n</ul>\n<h2 id=\"continued-lists\">Continued Lists</h2>\n<ol style=\"list-style-type: lower-roman\">\n<li><p>One</p></li>\n<li><p>Two</p>\n<p>An interruption in our regularly scheduled listing, for this essential and very relevant public service announcement.</p></li>\n<li><p>We now resume our normal programming</p></li>\n<li><p>Four</p></li>\n</ol>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\"><p>In paged media, footnotes are usually displayed at the bottom of the text. However, in ebooks, a better paradigm is to make them clickable endnotes that the user can browse at her pleasure. This conversion is handled automatically by calibre.<a href=\"#fnref1\">↩</a></p></li>\n<li id=\"fn2\"><p>Endnotes are typically used for longer notes, they remain endnotes when converted into ebook form, except that they have an additional backlink to make it easy to return to the current position after reading the note.<a href=\"#fnref2\">↩</a></p></li>\n</ol>\n</div>\n</body>\n</html>\n"
end

def expected_result_2
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <title>Title</title>\n  <style type=\"text/css\">code{white-space: pre;}</style>\n</head>\n<body>\n<div id=\"header\">\n<h1 class=\"title\">Title</h1>\n</div>\n<h1 id=\"heading-1\">Heading 1</h1>\n<p>This is a short sentence repeated 4 times as a paragraph. This is a short sentence repeated 4 times as a paragraph. This is a short sentence repeated 4 times as a paragraph. This is a short sentence repeated 4 times as a paragraph.</p>\n<p>Then a second sentence repeated 5 times. Then a second sentence repeated 5 times. Then a second sentence repeated 5 times. Then a second sentence repeated 5 times.</p>\n<h2 id=\"heading-2\">Heading 2</h2>\n<p>There are several items we would like to see in all development processes:</p>\n<ol style=\"list-style-type: decimal\">\n<li><p><a href=\"http://wekan.coko.foundation/b/wtcn6GrzsbvMhqYyC/ink\"><em>i</em></a>tem 1</p></li>\n<li><p>item 2</p></li>\n<li><p>item 3</p></li>\n</ol>\n<p>A short text.</p>\n<h3 id=\"heading-3\">Heading 3</h3>\n<ul>\n<li><p>Bullet 1</p></li>\n<li><p>bullet 2</p></li>\n<li><p>bullet 3</p></li>\n</ul>\n<p><strong>Bold</strong></p>\n<p>A table with special chars.</p>\n<table>\n<tbody>\n<tr class=\"odd\">\n<td>Punctuation</td>\n<td>HTML Entity<br />\n(case sensitive)</td>\n<td>ISO Latin-1 code</td>\n<td>name or meaning</td>\n</tr>\n<tr class=\"even\">\n<td>–</td>\n<td>&amp;ndash;</td>\n<td>&amp;#8211;</td>\n<td>en dash</td>\n</tr>\n<tr class=\"odd\">\n<td>—</td>\n<td>&amp;mdash;</td>\n<td>&amp;#8212;</td>\n<td>em dash</td>\n</tr>\n<tr class=\"even\">\n<td>¡</td>\n<td>&amp;iexcl;</td>\n<td>&amp;#161;</td>\n<td>inverted exclamation</td>\n</tr>\n<tr class=\"odd\">\n<td>¿</td>\n<td>&amp;iquest;</td>\n<td>&amp;#191;</td>\n<td>inverted question mark</td>\n</tr>\n<tr class=\"even\">\n<td>&quot;</td>\n<td>&amp;quot;</td>\n<td>&amp;#34;</td>\n<td><strong>quotation mark</strong></td>\n</tr>\n<tr class=\"odd\">\n<td>“</td>\n<td>&amp;ldquo;</td>\n<td>&amp;#8220;</td>\n<td>left double curly quote</td>\n</tr>\n<tr class=\"even\">\n<td>”</td>\n<td>&amp;rdquo;</td>\n<td>&amp;#8221;</td>\n<td>right double curly quote</td>\n</tr>\n<tr class=\"odd\">\n<td>'</td>\n<td> </td>\n<td>&amp;#39;</td>\n<td>apostrophe (single quote)</td>\n</tr>\n<tr class=\"even\">\n<td>‘</td>\n<td>&amp;lsquo;</td>\n<td>&amp;#8216;</td>\n<td>left single curly quote</td>\n</tr>\n<tr class=\"odd\">\n<td>’</td>\n<td>&amp;rsquo;</td>\n<td>&amp;#8217;</td>\n<td>right single curly quote</td>\n</tr>\n<tr class=\"even\">\n<td><p>«</p>\n<p>»</p></td>\n<td><p>&amp;laquo;</p>\n<p>&amp;raquo;</p></td>\n<td><p>&amp;#171;</p>\n<p>&amp;#187;</p></td>\n<td>guillemets (used as quotation marks in some languages, e.g., French)</td>\n</tr>\n</tbody>\n</table>\n</body>\n</html>\n"
end

def expected_result_3
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <title></title>\n  <style type=\"text/css\">code{white-space: pre;}</style>\n</head>\n<body>\n<p>This is a paragraph. Look at it go.</p>\n<p>That was fun.</p>\n<ol style=\"list-style-type: decimal\">\n<li><p>Thing</p></li>\n<li><p>second thing</p></li>\n<li><p>a third????</p></li>\n</ol>\n</body>\n</html>\n"
end

def expected_result_4
  file = Rack::Test::UploadedFile.new('spec/fixtures/files/samplestyles_converted_result.html')
  File.read(file)
end